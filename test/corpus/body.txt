==================
symbolic literals
==================

:- p(X), not p(X), not not p(X), -p(X), not -p(X), not not -p(X).

---

(source_file
  (integrity_constraint
    body: (body
      (body_literal
        atom: (symbolic_atom
          name: (identifier)
          arguments: (terms
            (variable))))
      (body_literal
        sign: (default_negation)
        atom: (symbolic_atom
          name: (identifier)
          arguments: (terms
            (variable))))
      (body_literal
        sign: (double_default_negation)
        atom: (symbolic_atom
          name: (identifier)
          arguments: (terms
            (variable))))
      (body_literal
        atom: (symbolic_atom
          sign: (classical_negation)
          name: (identifier)
          arguments: (terms
            (variable))))
      (body_literal
        sign: (default_negation)
        atom: (symbolic_atom
          sign: (classical_negation)
          name: (identifier)
          arguments: (terms
            (variable))))
      (body_literal
        sign: (double_default_negation)
        atom: (symbolic_atom
          sign: (classical_negation)
          name: (identifier)
          arguments: (terms
            (variable)))))))

==================
comparisons
==================

:- X < Y < Z, -p(X) < X < Y.

---

(source_file
  (integrity_constraint
    body: (body
      (body_literal
        atom: (comparison
          (variable)
          (relation)
          (variable)
          (relation)
          (variable)))
      (body_literal
        atom: (comparison
          (unary_operation
            right: (function
              name: (identifier)
              arguments: (terms
                (variable))))
          (relation)
          (variable)
          (relation)
          (variable))))))

==================
conditional literals
==================

:- a, not b: p, c; p(X):; not not X < Y < Z: p(X); d:.

---

(source_file
  (integrity_constraint
    body: (body
      (body_literal
        atom: (symbolic_atom
          name: (identifier)))
      (conditional_literal
        literal: (literal
          sign: (default_negation)
          atom: (symbolic_atom
            name: (identifier)))
        condition: (condition
          (literal
            atom: (symbolic_atom
              name: (identifier)))
          (literal
            atom: (symbolic_atom
              name: (identifier)))))
      (conditional_literal
        literal: (literal
          atom: (symbolic_atom
            name: (identifier)
            arguments: (terms
              (variable)))))
      (conditional_literal
        literal: (literal
          sign: (double_default_negation)
          atom: (comparison
            (variable)
            (relation)
            (variable)
            (relation)
            (variable)))
        condition: (condition
          (literal
            atom: (symbolic_atom
              name: (identifier)
              arguments: (terms
                (variable))))))
      (conditional_literal
        literal: (literal
          atom: (symbolic_atom
            name: (identifier)))))))

==================
body set aggregates
==================

:- not 1 { a; a: ; a: b; a: b, c } <= 3.

---

(source_file
  (integrity_constraint
    body: (body
      (body_literal
        sign: (default_negation)
        atom: (set_aggregate
          left: (lower
            (number))
          elements: (set_aggregate_elements
            (set_aggregate_element
              literal: (literal
                atom: (symbolic_atom
                  name: (identifier))))
            (set_aggregate_element
              literal: (literal
                atom: (symbolic_atom
                  name: (identifier))))
            (set_aggregate_element
              literal: (literal
                atom: (symbolic_atom
                  name: (identifier)))
              condition: (condition
                (literal
                  atom: (symbolic_atom
                    name: (identifier)))))
            (set_aggregate_element
              literal: (literal
                atom: (symbolic_atom
                  name: (identifier)))
              condition: (condition
                (literal
                  atom: (symbolic_atom
                    name: (identifier)))
                (literal
                  atom: (symbolic_atom
                    name: (identifier))))))
          right: (upper
            (relation)
            (number)))))))

==================
body aggregates
==================

:- not 1 #count { :; :a; a; a: ; a: b, c; a, b } <= 3.

---

(source_file
  (integrity_constraint
    body: (body
      (body_literal
        sign: (default_negation)
        atom: (body_aggregate
          left: (lower
            (number))
          function: (aggregate_function)
          elements: (body_aggregate_elements
            (body_aggregate_element)
            (body_aggregate_element
              condition: (condition
                (literal
                  atom: (symbolic_atom
                    name: (identifier)))))
            (body_aggregate_element
              terms: (terms
                (function
                  name: (identifier))))
            (body_aggregate_element
              terms: (terms
                (function
                  name: (identifier))))
            (body_aggregate_element
              terms: (terms
                (function
                  name: (identifier)))
              condition: (condition
                (literal
                  atom: (symbolic_atom
                    name: (identifier)))
                (literal
                  atom: (symbolic_atom
                    name: (identifier)))))
            (body_aggregate_element
              terms: (terms
                (function
                  name: (identifier))
                (function
                  name: (identifier)))))
          right: (upper
            (relation)
            (number)))))))
